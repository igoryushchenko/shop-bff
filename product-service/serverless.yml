service:
  name: product-service

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs12.x
  profile: aws-rs-cli
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    DB_HOST: ${ssm:/${self:provider.stage}/env/DB_HOST~true}
    DB_PORT: ${ssm:/${self:provider.stage}/env/DB_PORT~true}
    DB_NAME: ${ssm:/${self:provider.stage}/env/DB_NAME~true}
    DB_USERNAME: ${ssm:/${self:provider.stage}/env/DB_USERNAME~true}
    DB_PASSWORD: ${ssm:/${self:provider.stage}/env/DB_PASSWORD~true}
    SQS_URL:
      Ref: catalogItemsQueue
    SNS_ARN:
      Ref: catalogImportTopic

  iamRoleStatements:
    - Effect: "Allow"
      Action: "sqs:*"
      Resource:
        - Fn::GetAtt: [ catalogItemsQueue, Arn ]
    - Effect: "Allow"
      Action: "sns:*"
      Resource:
        Ref: catalogImportTopic

resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${ssm:/${self:provider.stage}/env/CATALOG_QUEUE~true}

    catalogImportTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${ssm:/${self:provider.stage}/env/CATALOG_TOPIC~true}

    catalogImportSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${ssm:/${self:provider.stage}/env/CATALOG_IMPORT_EMAIL~true}
        Protocol: email
        TopicArn:
          Ref: catalogImportTopic

  Outputs:
    catalogSQSUrl:
      Value:
        Ref: catalogItemsQueue

    catalogSQSArn:
      Value:
        Fn::GetAtt: [ catalogItemsQueue, Arn ]


functions:
  getProductsList:
    handler: src/handlers/index.getProductsList
    events:
      - http:
          path: /products
          method: get
          cors: true

  getProductById:
    handler: src/handlers/index.getProductById
    events:
      - http:
          path: /products/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true

  addProduct:
    handler: src/handlers/index.addProduct
    events:
      - http:
          path: /products
          method: post
          cors: true
          request:
            schema:
              application/json: ${file(src/schema/addProduct.json)}

  catalogBatchProcess:
    handler: src/handlers/index.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn